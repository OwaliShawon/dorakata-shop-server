{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isUndefined.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/compact.ts","../src/utils/get.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/utils/omit.ts","../src/logic/focusFieldBy.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/utils/isEmptyObject.ts","../src/constants.ts","../src/logic/shouldRenderFormState.ts","../src/logic/getFieldsValues.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/isErrorStateChanged.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isString.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/logic/getNodeParentName.ts","../src/logic/getProxyFormState.ts","../src/utils/Subject.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/utils/unset.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/logic/getFields.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/append.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getControllerValue.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/useWatch.ts"],"sourcesContent":["export default (val: unknown): val is undefined => val === undefined;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport { get } from '../utils';\nimport { FieldRefs, InternalFieldName } from '../types';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isEmptyObject from '../utils/isEmptyObject';\nimport { ReadFormState } from '../types';\nimport { VALIDATION_MODE } from '../constants';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import * as React from 'react';\nimport set from '../utils/set';\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef: React.MutableRefObject<FieldValues> = { current: {} },\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef.current,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value)\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport isUndefined from '../utils/isUndefined';\nimport { Field } from '../types';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, Message, FieldError, InternalFieldErrors } from '../types';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    !inputValue || (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(inputValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import * as React from 'react';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\nimport { VALIDATION_MODE } from '../constants';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import isWeb from './isWeb';\nimport { UNDEFINED } from '../constants';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import * as React from 'react';\nimport focusFieldBy from './logic/focusFieldBy';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport getProxyFormState from './logic/getProxyFormState';\nimport Subject from './utils/Subject';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport getValidationModes from './utils/getValidationModes';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport isHTMLElement from './utils/isHTMLElement';\nimport getFields from './logic/getFields';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormReturn,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  Field,\n  FieldRefs,\n  UseFormProps,\n  RegisterOptions,\n  ReadFormState,\n  Ref,\n  SetValueConfig,\n  FormState,\n  FieldNamesMarkedBoolean,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  UseFormRegisterReturn,\n  FieldPath,\n  WatchObserver,\n  KeepStateOptions,\n  EventType,\n  UseFormTrigger,\n  UseFormSetValue,\n  UseFormUnregister,\n  UseFormClearErrors,\n  UseFormSetError,\n  UseFormRegister,\n  UseFormHandleSubmit,\n  UseFormReset,\n  WatchInternal,\n  GetFormIsDirty,\n  ChangeHandler,\n  PathValue,\n  UseFormGetValues,\n  UseFormWatch,\n  Path,\n  DeepPartial,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getFormIsDirty: GetFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n\n      name && data && set(formValues, name, data);\n\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(get(fieldsRef.current, name) as Field),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: getFormIsDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef, defaultValuesRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : await Promise.all(\n              fields.map(async (data) => await executeValidation(data, null)),\n            );\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValueAndGetDefault = (name: InternalFieldName) => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (\n      field &&\n      (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))\n    ) {\n      defaultValue = isUndefined(field._f.value)\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value),\n        });\n      }\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        const inputValue = inputType ? getFieldValue(field) : value;\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n        const shouldSkipValidation = skipValidation({\n          isBlurEvent,\n          isTouched: !!get(formStateRef.current.touchedFields, name),\n          isSubmitted: formStateRef.current.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          state.touchedFields = formStateRef.current.touchedFields;\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef, defaultValuesRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(fieldsRef, defaultValuesRef)\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef, defaultValuesRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | FieldPath<TFieldValues>[]\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getFormIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    let field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n      if (\n        (isRadioOrCheckbox\n          ? Array.isArray(field._f.refs) &&\n            compact(field._f.refs).find(\n              (option) => ref.value === option.value && option === ref,\n            )\n          : ref === field._f.ref) ||\n        !field ||\n        (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref))\n      ) {\n        return;\n      }\n\n      field = {\n        _f: isRadioOrCheckbox\n          ? {\n              ...field._f,\n              refs: [\n                ...compact(field._f.refs || []).filter(\n                  (ref) => isHTMLElement(ref) && document.contains(ref),\n                ),\n                ref,\n              ],\n              ref: { type: ref.type, name },\n            }\n          : {\n              ...field._f,\n              ref,\n            },\n      };\n\n      set(fieldsRef.current, name, field);\n\n      const defaultValue = updateValueAndGetDefault(name);\n\n      if (\n        isRadioOrCheckbox && Array.isArray(defaultValue)\n          ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n          : isUndefined(get(fieldsRef.current, name)._f.value)\n      ) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(\n          get(fieldsRef.current, name),\n        );\n      }\n\n      if (options) {\n        if (\n          !validationMode.isOnSubmit &&\n          field &&\n          readFormStateRef.current.isValid\n        ) {\n          validateField(field, isValidateAllFieldCriteria).then((error) => {\n            isEmptyObject(error)\n              ? set(validFieldsRef.current, name, true)\n              : unset(validFieldsRef.current, name);\n\n            formStateRef.current.isValid &&\n              !isEmptyObject(error) &&\n              setFormState({ ...formStateRef.current, isValid: getIsValid() });\n          });\n        }\n      }\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(get(fieldsRef.current, name)\n            ? {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }\n            : { ref: { name } }),\n          name,\n          ...options,\n        },\n      });\n      options && set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n\n      updateValueAndGetDefault(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref && registerFieldRef(name, ref, options),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldValues = {\n        ...defaultValuesRef.current,\n        ...getFieldsValues(fieldsRef, defaultValuesRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    ({\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount,\n    }: KeepStateOptions) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty ? formStateRef.current.isDirty : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !validationMode.isOnSubmit,\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions);\n  };\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getFormIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n  };\n}\n","import * as React from 'react';\nimport { UseFormReturn, FieldValues, FormProviderProps } from './types';\nimport omit from './utils/omit';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...(Array.isArray(value) ? value : [value]), ...data];\n}\n","export default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...(Array.isArray(value) ? value : [value])];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  UseFormStateReturn,\n  UseFormStateProps,\n} from './types';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    (props && props.control) || methods.control;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) => {\n        shouldRenderFormState(formState, readFormState.current) &&\n          updateFormState({\n            ...formStateRef.current,\n            ...formState,\n          });\n      },\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { EVENTS } from './constants';\nimport {\n  FieldValues,\n  UseControllerProps,\n  UseControllerReturn,\n  InternalFieldName,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n}: UseControllerProps<TFieldValues>): UseControllerReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) ||\n      isNameInFieldArray(fieldArrayNamesRef.current, name)\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n  });\n  get(fieldsRef.current, name)._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    (ref as (instance: any) => void)({\n      target: value,\n    });\n\n    return () => controllerSubscription.unsubscribe();\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref,\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import getNodeParentName from './getNodeParentName';\nimport { InternalFieldName } from '../types';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\nconst Controller = <TFieldValues extends FieldValues = FieldValues>(\n  props: ControllerProps<TFieldValues>,\n) => props.render(useController(props));\n\nexport { Controller };\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport mapIds from './logic/mapId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport appendAt from './utils/append';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport compact from './utils/compact';\nimport isUndefined from './utils/isUndefined';\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport omit from './utils/omit';\nimport {\n  FieldValues,\n  UseFieldArrayProps,\n  FieldArrayWithId,\n  UseFieldArrayReturn,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldErrors,\n  FieldArrayPath,\n} from './types';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id'\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getFormIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef, defaultValuesRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    (Array.isArray(index) ? index : [index]).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getFormIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) =>\n      Object.entries(appendValueItem).forEach(([key, value]) => {\n        const inputName = `${parentName || name}.${\n          parentName ? valueIndex : index + valueIndex\n        }.${key}`;\n\n        Array.isArray(value)\n          ? registerFieldArray(value, valueIndex, inputName)\n          : set(fieldsRef.current, inputName, {\n              _f: {\n                ref: {\n                  name: inputName,\n                },\n                name: inputName,\n                value,\n              },\n            });\n      }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      value: get(getFieldsValues(fieldsRef, defaultValuesRef), name, []),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n\n    return () => {\n      fieldArrayDefaultValuesRef.current = getFieldsValues(fieldsRef);\n      fieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport {\n  DeepPartial,\n  UseWatchProps,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n  FieldPath,\n  InternalFieldName,\n  FieldPathValue,\n  FieldPathValues,\n} from './types';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[]\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, value }) => {\n        (!name ||\n          !inputName ||\n          (Array.isArray(name) ? name : [name]).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              inputName.startsWith(fieldName as InternalFieldName),\n          )) &&\n          updateValue(\n            isString(inputName) && name === inputName && !isUndefined(value)\n              ? value\n              : watchInternal(\n                  name as string,\n                  defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n                ),\n          );\n      },\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, [name]);\n\n  return value;\n}\n"],"names":["val","undefined","value","isObjectType","isNullOrUndefined","Array","isArray","Date","filter","Boolean","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","test","input","replace","set","object","index","tempPath","isKey","stringToPath","length","lastIndex","newValue","objValue","isObject","isNaN","source","copy","focusFieldBy","fields","callback","fieldsNames","Object","keys","field","get","_f","current","omit","name","ref","focus","refs","deepEqual","object1","object2","isErrorObject","isPrimitive","React","isValidElement","keys1","keys2","val1","val2","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","[object Object]","deepMerge","target","targetValue","sourceValue","slice","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","formState","readFormStateRef","isRoot","isEmptyObject","find","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","defaultReturn","isValid","options","previous","option","checked","element","type","defaultResult","validResult","map","attributes","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","RegExp","validationData","isRegex","message","isString","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","types","async","required","maxLength","minLength","min","max","pattern","validate","inputValue","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","substring","search","isProxyEnabled","localReadFormStateRef","Proxy","prop","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","next","Subject","observers","subscriber","window","HTMLElement","document","isWeb","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","data","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","getFields","fieldsRefs","currentFields","isWindowUndefined","FormContext","createContext","displayName","useFormContext","useContext","d","performance","now","c","r","Math","random","toString","keyName","generateId","indexes","i","temp","splice","removeAtIndexes","sort","a","b","from","to","indexA","indexB","prepend","append","insert","fill","useFormState","props","methods","formStateRef","formStateSubjectRef","control","updateFormState","useState","readFormState","useRef","isDirty","touchedFields","isValidating","useEffect","formStateSubscription","subscribe","shouldRenderFormState","unsubscribe","getProxyFormState","useController","rules","register","fieldArrayNamesRef","controllerSubjectRef","onChange","onBlur","setInputStateValue","names","some","getNodeParentName","isNameInFieldArray","controllerSubscription","event","getControllerValue","fieldState","defineProperties","invalid","isTouched","render","Provider","children","focusNameRef","isWatchAllRef","watchFieldsRef","getFormIsDirty","watchSubjectRef","fieldArraySubjectRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","setFields","mapIds","getFieldArrayParentName","omitKey","getCurrentFieldsValues","getFocusDetail","focusIndex","focusName","shouldFocus","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","updateDirtyFieldsWithDefaultValues","registerFieldArray","forEach","appendValueItem","valueIndex","inputName","watchField","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","swap","useCallback","fieldValues","swapArrayAt","move","moveArrayAt","prependValue","prependAt","fillEmptyArray","appendValue","appendAt","currentIndex","remove","removeArrayAt","resetFields","insertValue","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","isMountedRef","contextRef","resolverRef","validationMode","getValidationModes","isValidateAllFieldCriteria","setFormState","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","updatedFormState","setFieldValue","rawValue","shouldRegister","isHTMLElement","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","Promise","all","setInternalValues","inputKey","fieldName","isFieldWatched","has","match","updateValueAndGetDefault","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","watchInternal","isGlobal","isArrayNames","registerFieldRef","isRadioOrCheckboxFunction","contains","then","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepDirty","keepIsSubmitted","keepTouched","keepIsValid","keepSubmitCount","useFieldArraySubscription","useMemo","watch","info","setValue","isFieldArray","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","clearErrors","unregister","delete","keepError","keepValue","keepDefaultValue","setError","updateValue","watchSubscription"],"mappings":"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"}